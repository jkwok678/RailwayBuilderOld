<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="map_8h" kind="file" language="C++">
    <compoundname>map.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">memory</includes>
    <includes local="no">QMessageBox</includes>
    <includes local="no">thread</includes>
    <includes local="no">chrono</includes>
    <includes refid="element_8h" local="yes">element.h</includes>
    <includes refid="track_8h" local="yes">track.h</includes>
    <includedby refid="canvas_8h" local="yes">canvas.h</includedby>
    <includedby refid="main_8cpp" local="yes">main.cpp</includedby>
    <includedby refid="map_8cpp" local="yes">map.cpp</includedby>
    <includedby refid="window_8h" local="yes">window.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>QMessageBox</label>
      </node>
      <node id="10">
        <label>QFont</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="9">
        <label>QSharedPointer</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="13">
        <label>track.h</label>
        <link refid="track_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>QString</label>
      </node>
      <node id="1">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>element.h</label>
        <link refid="element_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="5">
        <label>thread</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>window.h</label>
        <link refid="window_8h_source"/>
      </node>
      <node id="2">
        <label>canvas.h</label>
        <link refid="canvas_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>map.h</label>
        <link refid="map_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_map" prot="public">Map</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QMessageBox&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/><sp/>&quot;element.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;track.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="class_map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_map" kindref="compound">Map</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalTrack{0};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;StraightTrack&gt;&gt;<sp/>straightTrackList;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;DirectTrack&gt;&gt;<sp/>directTrackList;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;CurvedTrack&gt;&gt;<sp/>curvedTrackList;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;LinkedTrack&gt;&gt;<sp/>linkedTrackList;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ExitTrack&gt;&gt;<sp/>exitTrackList;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;BufferTrack&gt;&gt;<sp/>bufferTrackList;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;SignalTrack&gt;&gt;<sp/>signalTrackList;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;BridgeUnderpassTrack&gt;&gt;<sp/>bridgeUnderpassTrackList;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;SwitchTrack&gt;&gt;<sp/>switchTrackList;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;CrossoverTrack&gt;&gt;<sp/>crossoverTrackList;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;FlyoverTrack&gt;&gt;<sp/>flyoverTrackList;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;NamedLocation&gt;&gt;<sp/>namedLocationList;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Concourse&gt;&gt;<sp/>concourseList;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Parapet&gt;&gt;<sp/>parapetList;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Text&gt;&gt;<sp/>textList;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;&gt;<sp/>trackList;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>linkedTrack1{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>linkedTrack2{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Track&gt;<sp/>findTopLeftTrack();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkAllLinkTrackLinked();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allLinkedTrackLinked;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allConnected;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Track&gt;<sp/>start{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Track&gt;<sp/>end{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;&gt;<sp/>setTrackSpeedLengthMainList;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;&gt;<sp/>setTrackSpeedLengthSecondaryList;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setTrackSpeedLengthCounter{1000};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_map" kindref="compound">Map</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getTotalTrack()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTotalTrack(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newTrackTotal);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;StraightTrack&gt;<sp/>&gt;<sp/>getStraightTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStraightTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;StraightTrack&gt;<sp/>&gt;&amp;<sp/>newStraightTrackList);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addStraightTrack(std::shared_ptr&lt;StraightTrack&gt;<sp/>newStraightTrack);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;StraightTrack&gt;<sp/>getStraightTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;DirectTrack&gt;<sp/>&gt;<sp/>getDirectTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setDirectTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;DirectTrack&gt;<sp/>&gt;&amp;<sp/>newDirectTrackList);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addDirectTrack(std::shared_ptr&lt;DirectTrack&gt;<sp/>newDirectTrack);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;DirectTrack&gt;<sp/>getDirectTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;CurvedTrack&gt;<sp/>&gt;<sp/>getCurvedTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCurvedTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;CurvedTrack&gt;<sp/>&gt;&amp;<sp/>newCurvedTrackList);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addCurvedTrack(std::shared_ptr&lt;CurvedTrack&gt;<sp/>newCurvedTrack);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;CurvedTrack&gt;<sp/>getCurvedTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;LinkedTrack&gt;<sp/>&gt;<sp/>getLinkedTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLinkedTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;LinkedTrack&gt;<sp/>&gt;&amp;<sp/>newLinkedTrackList);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addLinkedTrack(std::shared_ptr&lt;LinkedTrack&gt;<sp/>newLinkedTrack);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>getLinkedTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haslinkTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ExitTrack&gt;<sp/>&gt;<sp/>getExitTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setExitTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;ExitTrack&gt;<sp/>&gt;&amp;<sp/>newExitTrackList);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addExitTrack(std::shared_ptr&lt;ExitTrack&gt;<sp/>newExitTrack);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ExitTrack&gt;<sp/>getExitTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;BufferTrack&gt;<sp/>&gt;<sp/>getBufferTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBufferTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;BufferTrack&gt;<sp/>&gt;&amp;<sp/>newBufferTrackList);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBufferTrack(std::shared_ptr&lt;BufferTrack&gt;<sp/>newBufferTrack);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;BufferTrack&gt;<sp/>getBufferTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;SignalTrack&gt;<sp/>&gt;<sp/>getSignalTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSignalTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;SignalTrack&gt;<sp/>&gt;&amp;<sp/>newSignalTrackList);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSignalTrack(std::shared_ptr&lt;SignalTrack&gt;<sp/>newSignalTrack);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SignalTrack&gt;<sp/>getSignalTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;BridgeUnderpassTrack&gt;&gt;<sp/>getBridgeUnderpassTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBridgeUnderpassTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;BridgeUnderpassTrack&gt;<sp/>&gt;&amp;<sp/>newBridgeUnderpassTrackList);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addBridgeUnderpassTrack(std::shared_ptr&lt;BridgeUnderpassTrack&gt;<sp/>newBridgeUnderpassTrack);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;BridgeUnderpassTrack&gt;<sp/>getBridgeUnderpassTrack(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;SwitchTrack&gt;<sp/>&gt;<sp/>getSwitchTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSwitchTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;SwitchTrack&gt;<sp/>&gt;&amp;<sp/>newSwitchTrackList);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSwitchTrack(std::shared_ptr&lt;SwitchTrack&gt;<sp/>newSwitchTrack);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SwitchTrack&gt;<sp/>getSwitchTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;CrossoverTrack&gt;<sp/>&gt;<sp/>getCrossoverTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCrossoverTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;CrossoverTrack&gt;<sp/>&gt;&amp;<sp/>newCrossoverTrackList);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addCrossoverTrack(std::shared_ptr&lt;CrossoverTrack&gt;<sp/>newCrossoverTrack);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;CrossoverTrack&gt;<sp/>getCrossoverTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;FlyoverTrack&gt;<sp/>&gt;<sp/>getFlyoverTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFlyoverTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;FlyoverTrack&gt;<sp/>&gt;&amp;<sp/>newFlyoverTrackList);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFlyoverTrack(std::shared_ptr&lt;FlyoverTrack&gt;<sp/>newFlyoverTrack);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;FlyoverTrack&gt;<sp/>getFlyoverTrackAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;NamedLocation&gt;<sp/>&gt;<sp/>getNamedLocationList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setNamedLocationList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;NamedLocation&gt;<sp/>&gt;&amp;<sp/>newNamedLocationList);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addNamedLocation(std::shared_ptr&lt;NamedLocation&gt;<sp/>newNamedLocation);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;NamedLocation&gt;<sp/>getNamedLocationAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Concourse&gt;<sp/>&gt;<sp/>getConcourseList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setConcourseList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Concourse&gt;<sp/>&gt;&amp;<sp/>newConcourseList);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addConcourse(std::shared_ptr&lt;Concourse&gt;<sp/>newConcourseTrack);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Concourse&gt;<sp/>getConcourseAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Parapet&gt;<sp/>&gt;<sp/>getParapetList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setParapetList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Parapet&gt;<sp/>&gt;&amp;<sp/>newParapetList);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addParapet(std::shared_ptr&lt;Parapet&gt;<sp/>newParapet);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Parapet&gt;<sp/>getParapetAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Text&gt;<sp/>&gt;<sp/>getTextList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTextList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Text&gt;<sp/>&gt;&amp;<sp/>newTextList);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addText(std::shared_ptr&lt;Text&gt;<sp/>newText);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Element&gt;<sp/>getElementAt(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;NamedElement&gt;<sp/>getNamedElementAt(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Track&gt;<sp/>getTrackAt(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Text&gt;<sp/>getTextAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkElementExists(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkTextExists(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deleteElement(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deleteText<sp/>(std::shared_ptr&lt;Text&gt;<sp/>textToDelete);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deleteTextFromAllElement(std::shared_ptr&lt;Text&gt;<sp/>textToDelete);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addPlatform(Platform<sp/>side,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addLevelCrossing(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linkLocalText(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LocationY,<sp/>std::shared_ptr&lt;Text&gt;<sp/>linkedText);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>linkNewBlockToText(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locationY);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>getLinkedTrack1()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLinkedTrack1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>&amp;newLinkedTrack1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>getLinkedTrack2()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLinkedTrack2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;LinkedTrack&gt;<sp/>&amp;newLinkedTrack2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>connectLinkedTrack();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;<sp/>&gt;<sp/>getTrackList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;&gt;<sp/>makeTrackList();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTrackList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;<sp/>&gt;<sp/>&amp;value);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkAllTracks();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getAllLinkedTrackLinked()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAllLinkedTrackLinked(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newAllLinkedTrackLinked);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getAllConnected()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAllConnected(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newAllConnected);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;<sp/>&gt;<sp/>getSetTrackSpeedLengthMainList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSetTrackSpeedLengthMainList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;<sp/>&gt;<sp/>&amp;newSetTrackSpeedMainLengthList);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;<sp/>&gt;<sp/>getSetTrackSpeedLengthSecondaryList()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSetTrackSpeedLengthSecondaryList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Track&gt;<sp/>&gt;<sp/>&amp;newSetTrackSpeedSecondaryLengthList);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fillSetTrackSpeedLengthList(std::shared_ptr&lt;Track&gt;<sp/>track,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LastLink);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSectionSpeedLength();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetSetTrackSpeedLengthMechanics();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetFoundForAllTrack();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Track&gt;<sp/>getStart()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setStart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Track&gt;<sp/>&amp;value);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Track&gt;<sp/>getEnd()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setEnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Track&gt;<sp/>&amp;value);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setLengthSpeed(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSpeed);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>restoreDefaultLengthSpeed(std::shared_ptr&lt;Track&gt;<sp/>track);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearSetTraclSpeedLengthList();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>MAP_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="map.h"/>
  </compounddef>
</doxygen>
